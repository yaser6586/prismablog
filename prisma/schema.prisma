// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  title      String    @db.VarChar(255)
  imageUrl   String?
  imageUrl2  String?
  videoUrl   String?
  intro      String?
  content    String?
  conclusion String?
  category   Category?

  view      Int?      @default(0)
  published Boolean   @default(false)
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  Comment   Comment[]
  liked     Like[]

  @@index([id])
}

model Like {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  postId String
}

model Profile {
  id     String  @id @default(uuid())
  name   String?
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId String  @unique
}

model User {
  id                  String               @id @default(uuid())
  email               String               @unique
  name                String?
  imgUrl              String?              @default("https://teknext-bucket.storage.iran.liara.space/avatar/default-avatar.png")
  likes               Like[]
  comment             Comment[]
  posts               Post[]
  role                Role                 @default(USER)
  username            String?              @unique
  password            String?              @unique
  profile             Profile?
  passwordResetTokens PasswordResetToken[]
}

model PasswordResetToken {
  id        String    @id @default(uuid())
  token     String    @unique
  createdAt DateTime  @default(now())
  resetAt   DateTime?

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Comment {
  id      String @id @default(uuid())
  comment String
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  post    Post   @relation(fields: [postId], references: [id])
  postId  String
}

enum Role {
  USER
  ADMIN
}

enum Category {
  tech
  goodnews
  movie
  gadgets
  game
}
